#include <RGBmatrixPanel.h>                                             // Подключаем библиотеку для работы с матрицей

// Используем эти выводы, если матрица подключена к Arduino UNO
//#define CLK  8
//#define OE   9
//#define LAT 10

// Используем эти выводы, если матрица подключена к Arduino MEGA
//#define CLK 11
//#define OE   9
//#define LAT 10

// Используем эти выводы, если матрица подключена к Piranha ULTRA
#define CLK 11                                                          // Вывод Arduino, к которому подключён вывод CLK матрицы
#define OE  12                                                          // Вывод Arduino, к которому подключён вывод OE матрицы
#define LAT 13                                                          // Вывод Arduino, к которому подключён вывод LAT матрицы

#define A   A0                                                          // Вывод Arduino, к которому подключён вывод A матрицы
#define B   A1                                                          // Вывод Arduino, к которому подключён вывод B матрицы
#define C   A2                                                          // Вывод Arduino, к которому подключён вывод C матрицы
#define D   A3                                                          // Вывод Arduino, к которому подключён вывод D матрицы

RGBmatrixPanel matrix(A, B, C, D, CLK, LAT, OE, false, 64);             // Объявляем объект matrix для работы с матрицей 64х32, включаем двойную буферизацию

void setup() {
  int      x, y, hue;                                                   // Задаём переменные для координат X и Y и параметра оттенка цвета
  float    dx, dy, d;                                                   // переменные для диаметра окружности по Y, X и общему
  uint8_t  sat, val;                                                    // Задаём переменные для значений насыщенности и яркости
  uint16_t c;                                                           // Задаём переменную для задания цвета пикселя
  matrix.begin();                                                       // Инициируем работу с матрицей
  for (y = 0; y < matrix.height(); y++) {                               // Запускаем цикл, пока координата по Y меньше значения высоты матрицы
    dy = 15.5 - (float)y;                                               // Задаём функцию, при которой в матрицу впишется окружность, радиусом 15,5 пикселей по оси Y
    for (x = 0; x < matrix.height(); x++) {                             // Запускаем цикл, пока координата по X меньше значения высоты матрицы
      dx = 15.5 - (float)x;                                             // Задаём функцию, при которой в матрицу впишется окружность, радиусом 15,5 пикселей по оси X
      d  = dx * dx + dy * dy;                                           // Находим значение диаметра
      if (d <= (16.5 * 16.5)) {                                         // Если окружность с полученными диаметрами вписывается в матрицу, то
        hue = (int)((atan2(-dy, dx) + PI) * 1536.0 / (PI * 2.0));       // Определяем цвет пикселя
        d = sqrt(d);                                                    // Вычисляем квадратный корень из диаметра
        if (d > 15.5) {                                                 // Если диаметр больше 15.5 пикселей(окружность не вписывается в матрицу), то
          sat = 255;                                                    // Задаём максимальную насыщенность
          val = (int)((1.0 - (d - 15.5)) * 255.0 + 0.5);                // По границе окружности гасим светодиоды
        } else {                                                        // Если диаметр меньше 15.5 пикселей (окружность вписывается в матрицу), то
          sat = (int)(d / 15.5 * 255.0 + 0.5);                          // Меняем цвет от края окружности к центру (в центре белый цвет)
          val = 255;                                                    // Задаём максимальную яркость
        }
        c = matrix.ColorHSV(hue, sat, val, true);                       // Задаём цвет пикселя
      } else {                                                          // Если пиксели окружности не вписываются в матрицу, то
        c = 0;                                                          // гасим их
      }
      matrix.drawPixel(x, y, c);                                        // Включаем пиксель с указанным цветом
    }
  }
}

void loop() {}
